"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var geopackage_1 = require("@ngageoint/geopackage");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var bbox_1 = __importDefault(require("@turf/bbox"));
var GeoJSONToGeoPackage = /** @class */ (function () {
    function GeoJSONToGeoPackage(options) {
        this.options = options;
    }
    GeoJSONToGeoPackage.prototype.addLayer = function (options, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var clonedOptions;
            return __generator(this, function (_a) {
                clonedOptions = __assign(__assign({}, this.options), options);
                clonedOptions.append = true;
                return [2 /*return*/, this.setupConversion(clonedOptions, progressCallback)];
            });
        });
    };
    GeoJSONToGeoPackage.prototype.convert = function (options, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var clonedOptions;
            return __generator(this, function (_a) {
                clonedOptions = __assign(__assign({}, this.options), options);
                clonedOptions.append = false;
                return [2 /*return*/, this.setupConversion(clonedOptions, progressCallback)];
            });
        });
    };
    GeoJSONToGeoPackage.prototype.extract = function (geopackage, tableName) {
        return __awaiter(this, void 0, void 0, function () {
            var geoJson, iterator, iterator_1, iterator_1_1, feature;
            var e_1, _a;
            return __generator(this, function (_b) {
                geoJson = {
                    type: 'FeatureCollection',
                    features: [],
                };
                iterator = geopackage.iterateGeoJSONFeatures(tableName);
                try {
                    for (iterator_1 = __values(iterator), iterator_1_1 = iterator_1.next(); !iterator_1_1.done; iterator_1_1 = iterator_1.next()) {
                        feature = iterator_1_1.value;
                        geoJson.features.push(feature);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (iterator_1_1 && !iterator_1_1.done && (_a = iterator_1.return)) _a.call(iterator_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [2 /*return*/, Promise.resolve(geoJson)];
            });
        });
    };
    GeoJSONToGeoPackage.prototype.setupConversion = function (options, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var geopackage, srsNumber, append, geoJson, tableName, name, tables, count, correctedGeoJson, properties, i, feature, splitType, c, coords;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage = options.geoPackage;
                        srsNumber = options.srsNumber || 4326;
                        append = options.append;
                        geoJson = options.geoJson;
                        tableName = options.tableName;
                        return [4 /*yield*/, this.createOrOpenGeoPackage(geopackage, options, progressCallback)];
                    case 1:
                        geopackage = _a.sent();
                        if (typeof geoJson === 'string') {
                            name = path_1.default.basename(geoJson, path_1.default.extname(geoJson));
                        }
                        name = name || tableName || 'features';
                        tables = geopackage.getFeatureTables();
                        count = 1;
                        while (tables.indexOf(name) !== -1) {
                            name = name + '_' + count;
                            count++;
                        }
                        tableName = name;
                        if (!(typeof geoJson === 'string')) return [3 /*break*/, 5];
                        if (!progressCallback) return [3 /*break*/, 3];
                        return [4 /*yield*/, progressCallback({ status: 'Reading GeoJSON file' })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            fs_1.default.readFile(geoJson, 'utf8', function (err, data) {
                                resolve(JSON.parse(data));
                            });
                        })];
                    case 4:
                        geoJson = _a.sent();
                        _a.label = 5;
                    case 5:
                        correctedGeoJson = {
                            type: 'FeatureCollection',
                            features: [],
                        };
                        properties = {};
                        for (i = 0; i < geoJson.features.length; i++) {
                            feature = geoJson.features[i];
                            this.addFeatureProperties(feature, properties);
                            splitType = '';
                            if (feature.geometry.type === 'MultiPolygon') {
                                splitType = 'Polygon';
                            }
                            else if (feature.geometry.type === 'MultiLineString') {
                                splitType = 'LineString';
                            }
                            else {
                                correctedGeoJson.features.push(feature);
                                continue;
                            }
                            // split if necessary
                            for (c = 0; c < feature.geometry.coordinates.length; c++) {
                                coords = feature.geometry.coordinates[c];
                                correctedGeoJson.features.push({
                                    type: 'Feature',
                                    properties: feature.properties,
                                    geometry: {
                                        type: splitType,
                                        coordinates: coords,
                                    },
                                });
                            }
                        }
                        return [2 /*return*/, this.convertGeoJSONToGeoPackage(correctedGeoJson, geopackage, tableName, properties, progressCallback)];
                }
            });
        });
    };
    GeoJSONToGeoPackage.prototype.addFeatureProperties = function (feature, currentProperties) {
        if (feature.properties.geometry) {
            feature.properties.geometry_property = feature.properties.geometry;
            delete feature.properties.geometry;
        }
        if (feature.id) {
            if (!currentProperties['_feature_id']) {
                currentProperties['_feature_id'] = currentProperties['_feature_id'] || {
                    name: '_feature_id',
                };
            }
        }
        for (var key in feature.properties) {
            if (!currentProperties[key]) {
                var type = typeof feature.properties[key];
                if (feature.properties[key] !== undefined && feature.properties[key] !== null && type !== 'undefined') {
                    if (type === 'object') {
                        if (feature.properties[key] instanceof Date) {
                            type = 'Date';
                        }
                        else {
                            continue;
                        }
                    }
                    switch (type) {
                        case 'Date':
                            type = 'DATETIME';
                            break;
                        case 'number':
                            type = 'DOUBLE';
                            break;
                        case 'string':
                            type = 'TEXT';
                            break;
                        case 'boolean':
                            type = 'BOOLEAN';
                            break;
                    }
                    currentProperties[key] = {
                        name: key,
                        type: type,
                    };
                }
            }
        }
    };
    GeoJSONToGeoPackage.prototype.convertGeoJSONToGeoPackage = function (geoJson, geopackage, tableName, properties, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.convertGeoJSONToGeoPackageWithSrs(geoJson, geopackage, tableName, properties, 4326, progressCallback)];
            });
        });
    };
    GeoJSONToGeoPackage.prototype.convertGeoJSONToGeoPackageWithSrs = function (geoJson, geopackage, tableName, properties, srsNumber, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var geometryColumns, columns, index, key, prop, tmp, boundingBox, featureDao, count, featureCount, fivePercent, i, feature, featureId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geometryColumns = new geopackage_1.GeometryColumns();
                        geometryColumns.table_name = tableName;
                        geometryColumns.column_name = 'geometry';
                        geometryColumns.geometry_type_name = 'GEOMETRY';
                        geometryColumns.z = 2;
                        geometryColumns.m = 2;
                        columns = [];
                        columns.push(geopackage_1.FeatureColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
                        columns.push(geopackage_1.FeatureColumn.createGeometryColumn(1, 'geometry', 'GEOMETRY', false, null));
                        index = 2;
                        for (key in properties) {
                            prop = properties[key];
                            if (prop.name.toLowerCase() !== 'id') {
                                columns.push(geopackage_1.FeatureColumn.createColumn(index, prop.name, geopackage_1.DataTypes.fromName(prop.type), false, null));
                                index++;
                            }
                            else {
                                columns.push(geopackage_1.FeatureColumn.createColumn(index, '_properties_' + prop.name, geopackage_1.DataTypes.fromName(prop.type), false, null));
                                index++;
                            }
                        }
                        if (!progressCallback) return [3 /*break*/, 2];
                        return [4 /*yield*/, progressCallback({ status: 'Creating table "' + tableName + '"' })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        tmp = bbox_1.default(geoJson);
                        boundingBox = new geopackage_1.BoundingBox(Math.max(-180, tmp[0]), Math.min(180, tmp[2]), Math.max(-90, tmp[1]), Math.min(90, tmp[3]));
                        return [4 /*yield*/, geopackage.createFeatureTable(tableName, geometryColumns, columns, boundingBox, srsNumber)];
                    case 3:
                        featureDao = _a.sent();
                        count = 0;
                        featureCount = geoJson.features.length;
                        fivePercent = Math.floor(featureCount / 20);
                        i = 0;
                        _a.label = 4;
                    case 4:
                        if (!(i < featureCount)) return [3 /*break*/, 7];
                        feature = geoJson.features[i];
                        if (feature.id) {
                            feature.properties._feature_id = feature.id;
                        }
                        if (feature.properties.id) {
                            feature.properties._properties_id = feature.properties.id;
                            delete feature.properties.id;
                        }
                        if (feature.properties.ID) {
                            feature.properties._properties_ID = feature.properties.ID;
                            delete feature.properties.ID;
                        }
                        featureId = geopackage.addGeoJSONFeatureToGeoPackage(feature, tableName);
                        if (!(count++ % fivePercent === 0)) return [3 /*break*/, 6];
                        if (!progressCallback) return [3 /*break*/, 6];
                        return [4 /*yield*/, progressCallback({
                                status: 'Inserting features into table "' + tableName + '"',
                                completed: count,
                                total: featureCount,
                            })];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 4];
                    case 7:
                        if (!progressCallback) return [3 /*break*/, 9];
                        return [4 /*yield*/, progressCallback({
                                status: 'Done inserting features into table "' + tableName + '"',
                            })];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [2 /*return*/, geopackage];
                }
            });
        });
    };
    GeoJSONToGeoPackage.prototype.createOrOpenGeoPackage = function (geopackage, options, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var stats;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof geopackage === 'object')) return [3 /*break*/, 3];
                        if (!progressCallback) return [3 /*break*/, 2];
                        return [4 /*yield*/, progressCallback({ status: 'Opening GeoPackage' })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, geopackage];
                    case 3:
                        stats = void 0;
                        try {
                            stats = fs_1.default.statSync(geopackage);
                        }
                        catch (e) { }
                        if (stats && !options.append) {
                            console.log('GeoPackage file already exists, refusing to overwrite ' + geopackage);
                            throw new Error('GeoPackage file already exists, refusing to overwrite ' + geopackage);
                        }
                        else if (stats) {
                            console.log('open geopackage');
                            return [2 /*return*/, geopackage_1.GeoPackageAPI.open(geopackage)];
                        }
                        if (!progressCallback) return [3 /*break*/, 5];
                        return [4 /*yield*/, progressCallback({ status: 'Creating GeoPackage' })];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        console.log('Create new geopackage', geopackage);
                        return [2 /*return*/, geopackage_1.GeoPackageAPI.create(geopackage)];
                }
            });
        });
    };
    return GeoJSONToGeoPackage;
}());
exports.GeoJSONToGeoPackage = GeoJSONToGeoPackage;
//# sourceMappingURL=index.js.map