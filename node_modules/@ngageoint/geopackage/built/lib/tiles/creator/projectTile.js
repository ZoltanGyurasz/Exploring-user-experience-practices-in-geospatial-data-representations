// @ts-nocheck
var proj4 = require('proj4');
proj4 = 'default' in proj4 ? proj4['default'] : proj4;
module.exports = function (job, callback) {
    var tilePieceBoundingBox = JSON.parse(job.tilePieceBoundingBox);
    var tileBoundingBox = JSON.parse(job.tileBoundingBox);
    var height = job.height;
    var width = job.width;
    var imageData = new Uint8ClampedArray(width * height * 4);
    var sourceImageData = new Uint8ClampedArray(job.sourceImageData);
    var proj4From;
    if (job.projectionFrom) {
        try {
            proj4From = proj4(job.projectionFrom);
        }
        catch (e) { }
    }
    if (!proj4From && job.projectionFromDefinition) {
        proj4From = proj4(job.projectionFromDefinition);
    }
    var conversion;
    try {
        conversion = proj4(job.projectionTo, job.projectionFrom);
    }
    catch (e) { }
    if (!conversion) {
        conversion = proj4(job.projectionTo, job.projectionFromDefinition);
    }
    var latitude;
    var rows = [];
    for (var i = 0; i < height; i++) {
        rows.push(i);
    }
    var columns = [];
    for (var i = 0; i < width; i++) {
        columns.push(i);
    }
    for (var row = 0; row < height; row++) {
        latitude = tileBoundingBox.maxLatitude - row * job.tileHeightUnitsPerPixel;
        for (var column = 0; column < width; column++) {
            // loop over all pixels in the target tile
            // determine the position of the current pixel in the target tile
            var longitude = tileBoundingBox.minLongitude + column * job.tileWidthUnitsPerPixel;
            // project that lat/lng to the source coordinate system
            var projected = conversion.forward([longitude, latitude]);
            var projectedLongitude = projected[0];
            var projectedLatitude = projected[1];
            // now find the source pixel
            var xPixel = job.tile_width - Math.round((tilePieceBoundingBox.maxLongitude - projectedLongitude) / job.pixel_x_size);
            var yPixel = Math.round((tilePieceBoundingBox.maxLatitude - projectedLatitude) / job.pixel_y_size);
            if (xPixel >= 0 && xPixel < job.tile_width && yPixel >= 0 && yPixel < job.tile_height) {
                var sliceStart = yPixel * job.tile_width * 4 + xPixel * 4;
                var color = sourceImageData.slice(sliceStart, sliceStart + 4);
                imageData.set(color, row * width * 4 + column * 4);
            }
        }
    }
    postMessage({ message: 'done', imageData: imageData.buffer }, [imageData.buffer]);
    this.close();
};
//# sourceMappingURL=projectTile.js.map