"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTable = void 0;
var dataTypes_1 = require("../db/dataTypes");
/**
 * `UserTable` models optional [user data tables](https://www.geopackage.org/spec121/index.html#_options)
 * in a [GeoPackage]{@link module:geoPackage~GeoPackage}.
 *
 * @class
 * @param  {string} tableName table name
 * @param  {module:user/userColumn~UserColumn[]} columns user columns
 * @param  {string[]} [requiredColumns] required columns
 */
var UserTable = /** @class */ (function () {
    /**
     *
     * @param table_name the name of the table
     * @param columns array of columns
     * @param requiredColumns required columns
     */
    function UserTable(table_name, columns, requiredColumns) {
        this.table_name = table_name;
        this.columns = columns;
        this.requiredColumns = requiredColumns;
        /**
         * Array of column names
         * @type {string[]}
         */
        this.columnNames = [];
        /**
         * Mapping between column names and their index
         * @type {Object}
         */
        this.nameToIndex = {};
        this.uniqueConstraints = [];
        // Sort the columns by index
        this.columns.sort(function (a, b) {
            return a.index - b.index;
        });
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            if (column.index !== i) {
                throw new Error('Column has wrong index of ' + column.index + ', found at index: ' + i + ', Table Name: ' + this.table_name);
            }
        }
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            var index = column.index;
            if (column.primaryKey) {
                if (this.pkIndex !== undefined) {
                    throw new Error("More than one primary key column was found for table '" +
                        this.table_name +
                        "'. Index " +
                        this.pkIndex +
                        ' and ' +
                        index);
                }
                this.pkIndex = index;
            }
            this.columnNames.push(column.name);
            this.nameToIndex[column.name] = index;
        }
    }
    Object.defineProperty(UserTable.prototype, "tableType", {
        get: function () {
            return 'userTable';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Check for duplicate column names
     * @param  {Number} index         index
     * @param  {Number} previousIndex previous index
     * @param  {string} column        column
     * @throws Throws an error if previous index is not undefined
     */
    UserTable.prototype.duplicateCheck = function (index, previousIndex, column) {
        if (previousIndex !== undefined) {
            throw new Error('More than one ' +
                column +
                " column was found for table '" +
                this.table_name +
                "'. Index " +
                previousIndex +
                ' and ' +
                index);
        }
        return true;
    };
    /**
     * Check for the expected data type
     * @param  {module:db/dataTypes~GPKGDataType} expected expected data type
     * @param  {module:user/userColumn~UserColumn} column   column
     * @throws Will throw an error if the actual column type does not match the expected column type
     */
    UserTable.prototype.typeCheck = function (expected, column) {
        var actual = column.dataType;
        if (!actual || actual !== expected) {
            throw new Error('Unexpected ' +
                column.name +
                " column data type was found for table '" +
                this.table_name +
                "', expected: " +
                dataTypes_1.DataTypes.nameFromType(expected) +
                ', actual: ' +
                column.dataType);
        }
        return true;
    };
    /**
     * Check for missing columns
     * @param  {Number} index  index
     * @param  {string} column column
     * @throws Will throw an error if no column is found
     */
    UserTable.prototype.missingCheck = function (index, column) {
        if (index === undefined || index === null) {
            throw new Error('No ' + column + " column was found for table '" + this.table_name + "'");
        }
        return true;
    };
    /**
     * Get the column index of the column name
     * @param  {string} columnName column name
     * @return {Number} the column index
     * @throws Will throw an error if the column is not found in the table
     */
    UserTable.prototype.getColumnIndex = function (columnName) {
        var index = this.nameToIndex[columnName];
        if (index === undefined || index === null) {
            throw new Error("Column does not exist in table '" + this.table_name + "', column: " + columnName);
        }
        return index;
    };
    /**
     * Check if the table has the column
     * @param  {string} columnName name of the column
     * @return {Boolean}            true if the column exists in the table
     */
    UserTable.prototype.hasColumn = function (columnName) {
        try {
            this.getColumnIndex(columnName);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Get the column name from the index
     * @param  {Number} index index
     * @return {string} the column name
     */
    UserTable.prototype.getColumnNameWithIndex = function (index) {
        return this.columnNames[index];
    };
    /**
     * Get the column from the index
     * @param  {Number} index index
     * @return {module:user/userColumn~UserColumn} column at the index
     */
    UserTable.prototype.getColumnWithIndex = function (index) {
        return this.columns[index];
    };
    /**
     * Get column with the column name
     * @param  {string} columnName column name
     * @return {module:user/userColumn~UserColumn}            column at the index
     */
    UserTable.prototype.getColumnWithColumnName = function (columnName) {
        return this.getColumnWithIndex(this.getColumnIndex(columnName));
    };
    Object.defineProperty(UserTable.prototype, "columnCount", {
        /**
         * Get the column count
         * @return {Number} the count of the columns
         */
        get: function () {
            return this.columns.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserTable.prototype, "pkColumn", {
        /**
         * Get the primary key column
         * @return {module:user/userColumn~UserColumn} the primary key column
         */
        get: function () {
            return this.columns[this.pkIndex];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserTable.prototype, "idColumnIndex", {
        /**
         * Get the column index of the id column
         * @return {Number}
         */
        get: function () {
            return this.pkIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserTable.prototype, "idColumn", {
        /**
         * Get the primary key id column
         * @return {module:user/userColumn~UserColumn}
         */
        get: function () {
            return this.pkColumn;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Add a unique constraint
     * @param uniqueConstraint unique constraint to add
     * @returns number of unique constraints
     */
    UserTable.prototype.addUniqueConstraint = function (uniqueConstraint) {
        return this.uniqueConstraints.push(uniqueConstraint);
    };
    UserTable.FEATURE_TABLE = 'FEATURE';
    UserTable.TILE_TABLE = 'TILE';
    return UserTable;
}());
exports.UserTable = UserTable;
//# sourceMappingURL=userTable.js.map